#ifndef _EXCEPTIONS_H_
#define _EXCEPTIONS_H_

#include <string>
#include <sstream>
#include <stdexcept>

#define WHERE WhereAt(__FILE__, __PRETTY_FUNCTION__, __LINE__)

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief Describe where in code an error occurs.
/// @tparam X Filename type
/// @tparam Y Function name type
/// @tparam Z Line type
/// @param x Filename
/// @param y Function name
/// @param z Line number
/// @return String describing when in code something occurs
////////////////////////////////////////////////////////////////////////////////
template<typename X, typename Y, typename Z>
std::string WhereAt(X x, Y y, Z z) {
  std::ostringstream oss;
  oss << "File: " << x << "\n\tFunction: " << y << "\n\tLine: " << z;
  return oss.str();
};

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief Base exception class
////////////////////////////////////////////////////////////////////////////////
struct Exception : public std::runtime_error {
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _type Type of error
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    Exception(const std::string& _type,
              const std::string& _where,
              const std::string& _message) :
      std::runtime_error(
          "\nError:\n\t" + _type +
          "\nWhere:\n\t" + _where +
          "\nWhy:\n\t" + _message +
          "\n") {
      }
};

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief Parse exceptions
////////////////////////////////////////////////////////////////////////////////
struct ParseException : Exception {
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    ParseException(const std::string& _where, const std::string& _message) :
      Exception("Parse Exception", _where, _message) {}
};

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief Write exceptions
////////////////////////////////////////////////////////////////////////////////
struct WriteException : Exception {
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    WriteException(const std::string& _where, const std::string& _message) :
      Exception("Write Exception", _where, _message) {}
};

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief Run time exceptions
////////////////////////////////////////////////////////////////////////////////
struct RunTimeException : Exception {
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    RunTimeException(const std::string& _where, const std::string& _message) :
      Exception("Runtime Exception", _where, _message) {}
};

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief OpenGL build exceptions
////////////////////////////////////////////////////////////////////////////////
struct BuildException : Exception {
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    BuildException(const std::string& _where, const std::string& _message) :
        Exception("Build Exception", _where, _message) {}
};


////////////////////////////////////////////////////////////////////////////////
/// @ingroup Exceptions
/// @brief OpenGL drawing exceptions
////////////////////////////////////////////////////////////////////////////////
struct DrawException : Exception {
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    /// @param _where Location generated by WHERE macro
    /// @param _message Error message
    DrawException(const std::string& _where, const std::string& _message) :
        Exception("Draw Exception", _where, _message) {}
};


#endif
